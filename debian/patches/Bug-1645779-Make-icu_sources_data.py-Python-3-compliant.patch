From: Ricky Stewart <rstewart@mozilla.com>
Date: Thu, 18 Jun 2020 22:01:49 +0100
Subject: Bug 1645779 - Make icu_sources_data.py Python 3-compliant

r=jwalden,anba

This removes a dependency on `pymake`, which is Python 2-only, and
thoroughly unnecessary since we just use it to find assignments of the
form `OBJECTS = ...`. We can replicate this logic by just isolating
lines that begin with that literal string, and everything else can
stay the same. This is definitionally more brittle than actually using
a parser, but it works fine for now, and the original implementation
wasn't significantly better (it didn't handle any form of dynamism,
anything more complicated than a single unconditional assignment with
a space-separated list of literal strings representing outputs, etc.)

Differential Revision: https://phabricator.services.mozilla.com/D79896
Origin: upstream, commit:https://hg.mozilla.org/mozilla-central/raw-rev/d6b0857e2fa1e2a43fe491df9a552b480945c1fb
---
 intl/icu_sources_data.py | 16 +++++++---------
 1 file changed, 7 insertions(+), 9 deletions(-)

diff --git a/intl/icu_sources_data.py b/intl/icu_sources_data.py
index 003f6a7..e366f05 100644
--- a/intl/icu_sources_data.py
+++ b/intl/icu_sources_data.py
@@ -136,16 +136,15 @@ def find_source_file(dir, filename):
 
 
 def get_sources_from_makefile(makefile):
-    import pymake.parser
-    from pymake.parserdata import SetVariable
     srcdir = os.path.dirname(makefile)
-    for statement in pymake.parser.parsefile(makefile):
-        if (isinstance(statement, SetVariable) and
-                statement.vnameexp.is_static_string and
-                statement.vnameexp.s == 'OBJECTS'):
+    with open(makefile) as f:
+        contents = f.read().replace('\\\n', '').split('\n')
+    for line in contents:
+        if line.startswith('OBJECTS ='):
             return sorted((find_source_file(srcdir, s)
-                           for s in statement.value.split()),
+                           for s in line[len('OBJECTS ='):].strip().split()),
                           key=lambda x: x.lower())
+    raise AssertionError('OBJECTS definition not found in file %s' % makefile)
 
 
 def list_headers(path):
@@ -158,7 +157,7 @@ def list_headers(path):
 
 
 def write_sources(mozbuild, sources, headers):
-    with open(mozbuild, 'wb') as f:
+    with open(mozbuild, 'w', newline='\n', encoding='utf-8') as f:
         f.write('# THIS FILE IS GENERATED BY /intl/icu_sources_data.py ' +
                 'DO NOT EDIT\n' +
                 'SOURCES += [\n')
@@ -171,7 +170,6 @@ def write_sources(mozbuild, sources, headers):
 
 def update_sources(topsrcdir):
     print('Updating ICU sources lists...')
-    sys.path.append(mozpath.join(topsrcdir, 'build/pymake'))
     for d in ['common', 'i18n']:
         base_path = mozpath.join(topsrcdir, 'intl/icu/source/%s' % d)
         makefile = mozpath.join(base_path, 'Makefile.in')
